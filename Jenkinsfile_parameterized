#!groovy
@Library("Infrastructure") _

import uk.gov.hmcts.contino.HealthChecker
import uk.gov.hmcts.contino.azure.KeyVault

properties([
        parameters([
                string(name: 'PRODUCT_NAME', defaultValue: 'ccd-elastic-search', description: ''),
                choice(name: 'ENVIRONMENT', choices: 'sandbox\nsaat\nsprod', description: 'Environment where code should be build and deployed'),
                booleanParam(name: 'RUN_ANSIBLE', defaultValue: true, description: 'Select this to run ansible playbook'),
        ])
])

def setupSecret() {
  azureKeyVault(
    keyVaultURL: "https://ccd-${env.ENV}.vault.azure.net/",
    secrets: [
      secret('ccd-vm-ssh-private-key', 'CCD_VM_SSH_PRIVATE_KEY'),
      secret('ccd-vm-admin-name', 'CCD_VM_ADMIN_NAME'),
    ]) {
    env.CCD_VM_SSH_PRIVATE_KEY = "${CCD_VM_SSH_PRIVATE_KEY}"
    env.CCD_VM_ADMIN_NAME = "${CCD_VM_ADMIN_NAME}"
  }
}

if (params.RUN_ANSIBLE == true) {
        withParameterizedInfraPipeline(params.PRODUCT_NAME, params.ENVIRONMENT, 'sandbox') {
    

    before('buildinfra:sandbox') 
    {
        setupSecret()
        sh "echo 'Running Ansible Playbook for Sandbox'"
        sh "sudo apt update && sudo apt install -y ansible"
        sh "ansible --version"
        sh "echo 'environment ${env.ENV}'"

        sh "echo ${CCD_VM_ADMIN_NAME} > /tmp/ansible_admin_name.txt"

        sh "cat /tmp/ansible_admin_name.txt"
    }

    afterAlways('buildinfra:sandbox') {
        echo 'Healthcheck in Sandbox'
        healthCheckStage('sandbox', 'sandbox')
    }
    afterAlways('buildinfra:saat') {
        echo 'Healthcheck in SAAT'
        healthCheckStage('sandbox', 'saat')
    }
    afterAlways('buildinfra:sandbox') {
        

        echo 'Healthcheck in sprod'
        healthCheckStage('sandbox', 'sprod')
    }
}


}
else{
        withParameterizedInfraPipeline(params.PRODUCT_NAME, params.ENVIRONMENT, 'sandbox') {
    

    afterAlways('buildinfra:sandbox') {
        echo 'Healthcheck in Sandbox'
        healthCheckStage('sandbox', 'sandbox')
    }
    afterAlways('buildinfra:saat') {
        echo 'Healthcheck in SAAT'
        healthCheckStage('sandbox', 'saat')
    }
    afterAlways('buildinfra:sandbox') {
        echo 'Healthcheck in sprod'
        healthCheckStage('sandbox', 'sprod')
    }
}

}


def healthCheckStage(subscription, environmentName) {
        stage('HealthCheck') {
                def healthChecker = new HealthChecker(this)
                healthChecker.check(healthCheckUrl(subscription, environmentName), 10, 40) { response ->
                        if (response.content.contains("yellow")) {
                                currentBuild.result = "UNSTABLE"
                        }
                        !response.content.contains("red")
                }
        }
}

def healthCheckUrl(subscription, environmentName) {
        KeyVault keyVault = new KeyVault(this, subscription, "ccd-$environmentName")
        es_url = keyVault.find("ccd-ELASTIC-SEARCH-URL").trim()
        echo "retrieved ES URL: ${es_url}"
        "http://" + es_url + ":9200/_cluster/health"
}
