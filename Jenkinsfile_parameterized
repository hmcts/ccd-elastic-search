#!groovy
@Library("Infrastructure") _

import uk.gov.hmcts.contino.HealthChecker
import uk.gov.hmcts.contino.azure.KeyVault

properties([
        parameters([
                string(name: 'PRODUCT_NAME', defaultValue: 'ccd', description: ''),
                choice(name: 'ENVIRONMENT', choices: 'sandbox\nsaat\nsprod', description: 'Environment where code should be build and deployed')
        ])
])


withParameterizedInfraPipeline(params.PRODUCT_NAME, params.ENVIRONMENT, 'sandbox') {
    after('buildinfra:sandbox') {
        echo 'Healthcheck in Sandbox'
        healthCheckStage('sandbox', 'sandbox')
    }
    after('buildinfra:saat') {
        echo 'Healthcheck in SAAT'
        healthCheckStage('sandbox', 'saat')
    }
    after('buildinfra:sandbox') {
        echo 'Healthcheck in sprod'
        healthCheckStage('sandbox', 'sprod')
    }
}

def healthCheckStage(subscription, environmentName) {
        stage('HealthCheck') {
                def healthChecker = new HealthChecker(this)
                healthChecker.check(healthCheckUrl(subscription, environmentName), 10, 40) { response ->
                        if (response.content.contains("yellow")) {
                                currentBuild.result = "UNSTABLE"
                        }
                        !response.content.contains("red")
                }
        }
}

def healthCheckUrl(subscription, environmentName) {
        KeyVault keyVault = new KeyVault(this, subscription, "ccd-$environmentName")
        es_url = keyVault.find("ccd-ELASTIC-SEARCH-URL").trim()
        echo "retrieved ES URL: ${es_url}"
        "http://" + es_url + ":9200/_cluster/health"
}
