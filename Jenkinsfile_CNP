#!groovy
@Library("Infrastructure") _

import uk.gov.hmcts.contino.Environment
import uk.gov.hmcts.contino.HealthChecker
import uk.gov.hmcts.contino.azure.KeyVault

properties([
        parameters([
                string(name: 'PRODUCT_NAME', defaultValue: 'ccd', description: ''),
                booleanParam(name: 'DEPLOY_ES_CLUSTER', defaultValue: false, description: 'Select to deploy ElasticSearch'),
        ])
])

if (params.DEPLOY_ES_CLUSTER == true) {
    withInfraPipeline(params.PRODUCT_NAME) {
        onMaster {
            enableSlackNotifications('#ccd-master-builds')
        }
        onDemo {
            enableSlackNotifications('#ccd-demo-builds')
        }

        // Healthcheck per env
        after('buildinfra:aat') {
            echo 'Healthcheck in AAT'
            healthCheckStage('nonprod', 'aat')
        }
        after('buildinfra:prod') {
            echo 'Healthcheck in PROD'
            healthCheckStage('prod', 'prod')
        }
        after('buildinfra:perftest') {
            echo 'Healthcheck in Perftest'
            healthCheckStage('qa', 'perftest')
        }
        after('buildinfra:demo') {
            echo 'Healthcheck in Perftest'
            healthCheckStage('nonprod', 'demo')
        }
        after('buildinfra:ithc') {
            echo 'Healthcheck in Perftest'
            healthCheckStage('qa', 'ithc')
        }
    }
}

def healthCheckStage(subscription, environmentName) {
    stage('HealthCheck') {
        def healthChecker = new HealthChecker(this)
        healthChecker.check(healthCheckUrl(subscription, environmentName), 10, 40) { response ->
            if (response.content.contains("yellow")) {
                currentBuild.result = "UNSTABLE"
            }
            !response.content.contains("red")
        }
    }
}

def healthCheckUrl(subscription, environmentName) {
    KeyVault keyVault = new KeyVault(this, subscription, "ccd-$environmentName")
    es_url = keyVault.find("ccd-ELASTIC-SEARCH-URL").trim()
    echo "retrieved ES URL: ${es_url}"
    "http://" + es_url + ":9200/_cluster/health"
}
